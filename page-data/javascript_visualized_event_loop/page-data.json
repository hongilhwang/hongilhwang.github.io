{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript_visualized_event_loop/","result":{"data":{"site":{"siteMetadata":{"title":"Camveloper blog"}},"markdownRemark":{"id":"67aa0604-1760-534f-bfbf-8f515bbb9908","excerpt":"오래전에 회사 동료가 Front-end에 대한 면접에서 질문으로 setTimeout과 함께 출력 코드가 있을때 결과에 대한 질문을 많이 했다.\n이것은 javascript의 event loop…","html":"<p>오래전에 회사 동료가 Front-end에 대한 면접에서 질문으로 setTimeout과 함께 출력 코드가 있을때 결과에 대한 질문을 많이 했다.\n이것은 javascript의 event loop에 대해서 이해를 해야지 답할수 있는 문제인데, 최근에 다시 한번 이 부분에 대해서 정리를 해둬야 겠다는 생각이 들었다.\n이미 잘 정리된 영문 내용이 있어서 해당글을 번역과 정리를 해본다.</p>\n<h1>JavaScript Visualized: Event Loop</h1>\n<p><strong>JavaScript Visualized: Event Loop</strong>를 번역하여 이해 한대로 정리한 글이다.</p>\n<h1>이벤트 루프</h1>\n<p>이벤트 루프는 태스크 큐와 콜 스택을 연결 해주는 반복 문이다. 콜 스택이 비어 있고, 태스크 큐에 콜백 함수가 있다면, 이벤트 루프틑 태스크 큐에서 첫번째 함수를 인출하여 콜 스택으로 이동 시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">waitForMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  queue<span class=\"token punctuation\">.</span><span class=\"token function\">processNextMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>이벤트 루프 동작 예시</h2>\n<p><strong>JavaScript는 단일 스레드이다</strong>. 한번에 하나의 작업만 실행 할 수 있다. 일반적으로 별거 아니지만, 30초가 걸리는 작업이 있다고 생각을 해보자, 브라우저가 “응답없음” 상태에서 멈춰 있고, 매우 느린 웹서핑이 될 것이다.</p>\n<p>다행스럽게도 <strong>브라우저</strong>는 JavaScript 엔진 자체가 제공하지 않는 몇 가지 기능인 <strong>Web API를 제공</strong> 한다. 여기에는 <strong>DOM API, <code class=\"language-text\">setTimeout</code> , HTTP 요청</strong> 등이 포함 된다. 이를 통해 비동기 비차단 동작을 생성할 수 있다.</p>\n<p>함수를 호출하면 호출 스택이라는 항목에 추가 된다. 호출 스택은 JS 엔진의 일부이며 브라우저에 따라 다르다. 다만 동작 방식은 스택이므로 LIFO 동작을 하게 된다. 함수가 값을 반환 하면 스택에서 제거 된다.</p>\n<p><img src=\"/da3de0be2c8717c7408ae75f37aa4b9a/gid1.6.gif\" alt=\"gid1.6.gif\"></p>\n<p>위에서 <code class=\"language-text\">respond</code> 함수는 <code class=\"language-text\">setTimeout</code> 함수를 반환한다. <code class=\"language-text\">setTimeout</code>은 Web API에 의해 제공되며, 메인 스레드를 차단하지 않고 작업을 지연시킬 수 있다.</p>\n<p><code class=\"language-text\">setTimeout</code> 함수에 인자로 전달한 콜백 함수인 화살표 함수 <code class=\"language-text\">() => { return 'Hey!' }</code>는 Web API에 추가된다. 두 번째 인자로 전달한 값에 따라, 해당 콜백 함수는 일정 시간 그 작업이 지연된 후 실행된다. setTimeout 함수와 respond 함수는 스택에서 제거 되며, 각각의 값을 반환하게 된다.</p>\n<p><img src=\"/53e8d25ab9ffbca763742a73d0968885/event-loop-call-stack2.gif\" alt=\"event-loop-call-stack2.gif\"></p>\n<p>Web API에서는 두번째 인수로 전달 받은 시간 만큼 타이머를 실행 하고, 전달 받은 콜백 함수를 스택에 추가하지 않고 <code class=\"language-text\">Task Queue</code> 라는 곳에 전달 한다.</p>\n<p><img src=\"/bb133167acba9732c254fe1b4e2604a3/event-loop-queue.gif\" alt=\"event-loop-queue.gif\"></p>\n<p><strong>콜백 함수는 다른 함수와 다르게 태스크 큐에 저장</strong> 되며, 큐는 말그대로 FIFO 순으로 콜백 함수를 반환하게 된다.</p>\n<p>이벤트 루프는 태스크 큐와 호출 스택을 연결한다. 만약, 호출 스택이 비어 있다면, 이벤트 루프는 <strong>태스크 큐에서 콜백 함수를 인출 하여 콜 스택에 추가</strong> 하게 된다. 이 경우에는 <strong>다른 함수는 호출 되지 않으며</strong>, 이는 콜 백 함수가 이벤트 루프에 의해 큐의 첫 번째 항목으로 추가 되기 전까지 호출 스택이 비어 있음을 의미한다.</p>\n<p><img src=\"/7e58f74b2b2116d7cb8ae573570df2a5/event-loop-queue2.gif\" alt=\"event-loop-queue2.gif\"></p>\n<p>콜백 함수가 호출 스택에 추가되면, 함수가 호출 되고 그 결과 값을 반환한 뒤 스택에서 제거 된다.</p>\n<p><img src=\"/1d816457778f4661c64139f8b195dbdb/gif5.gif\" alt=\"gif5.gif\"></p>\n<h1>예제</h1>\n<p>다음을 실행하면 콘솔에 실행 결과를 알아 본다</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Second\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">baz</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Third\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"/76fe969d3223cedc55d83322ac06d4e3/gif14.1.gif\" alt=\"gif14.1.gif\"></p>\n<ol>\n<li>bar 함수를 호출 되어 콜 스택에 적재 된다.</li>\n<li>bar 함수가 콜 스택에서 제거 되면서 setTimeout 함수가 반환된다.</li>\n<li>setTimeout은 WEB API(혹은 백그라운드)에 추가되고 타이머가 작동 한다</li>\n<li>타이머가 작동하는 동안, foo이 호출 스택에 추가 되고, 실행 되면서 First가 출력 되며, 호출 스택에서 제거 된다.</li>\n<li>baz가 호출 스택에 추가 되고, 실행 되면서 Third가 출력되고 호출 스택에서 제거 되며 그와 동시에 타이머가 종료된 setTimeout의 콜백 함수가 큐에 등록 된다.</li>\n<li>Event loop가 Call stack에 아무런 명령이 없는 것을 확인하고, 큐에서 콜백 함수를 호출하여 스택에 등록 후 스택에 콜백 함수를 호출하고, Second를 출력 한다.</li>\n</ol>\n<h2>출력 결과</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">First\nThird\nSecond</code></pre></div>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Event_loop\">MDN :  이벤트 루프</a></li>\n</ul>","frontmatter":{"title":"JavaScript의 Event Loop","date":"July 13, 2023","description":"'Javascript visualized: Event'라는 블로그 글의 번역 게시물"}}},"pageContext":{"slug":"/javascript_visualized_event_loop/","previous":{"fields":{"slug":"/coroutine/"},"frontmatter":{"title":"코루틴"}},"next":null}},"staticQueryHashes":["2833426266","2841359383"],"slicesMap":{}}