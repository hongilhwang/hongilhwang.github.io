{"componentChunkName":"component---src-templates-blog-post-js","path":"/coroutine/","result":{"data":{"site":{"siteMetadata":{"title":"Camveloper blog"}},"markdownRemark":{"id":"c144d3e4-f9a2-537a-9514-337b9d3c4127","excerpt":"코루틴 React & Kotlin…","html":"<h1>코루틴</h1>\n<p>React &#x26; Kotlin을 주로 사용하다 보니, 코루틴과 제너레이터 개념을 정리 할 필요가 있었다. 그래서 이번주에는 이 내용을 검색 해보며, 정리 해보았다.</p>\n<h1>코루틴이란</h1>\n<p>일반 적인 함수를 호출 되고, 바로 해당 작업을 진행 하고, 반환하고 종료 하게 된다. 하지만 코루틴은 서브 루틴을 일시 정지하고 재개할 수 있는 구성이 포함 되어 있다. 호출자가 코루틴 함수를 일시 정지하고 재개 할수 있다는 말이다.</p>\n<p>이로 인해 어떤 작업으로 인해 작업을 대기 해야 할때, 일지 정지후 필요에 따라서 다시 시작 함으로써 I/O처리를 극대화 함으로써 CPU의 유효 시간(Idle time)을 최소화 할 수 있다.</p>\n<h2>코루틴은 멀티쓰레드의 대체가 아니다.</h2>\n<p>루틴이라는 용어 때문일까? 멀티쓰레드의 대체로 많이들 생각 하지만, 그렇지는 않고, 코루틴은 일시정지와 재개가 가능한 함수이기 때문에 기본적으로 하나의 스레드를 가진다. 단지 그 뿐이다.</p>\n<h1>제너레이터</h1>\n<p>Javascript 에서 saga를 사용하다 보면 yield라는 키워드를 확인 할수 있다. 해당 키워드를 포함한 함수를 Generator라고 부른다.( C#, Python에도 있다고 한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> index<span class=\"token punctuation\">;</span>\n    index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Expected output: 0</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Expected output: 1</span></code></pre></div>\n<p>Generator 는 즉시 값을 처리 하지 않고 호출자의 필요에 따라서 함수를 재개하여 값을 리턴 한다. Generator는 코루틴하다고 할수 있다.</p>\n<p>또 그것을 바탕으로 JavaScript는 Async / Await이 만들었다.</p>\n<h1>Go의 고루틴</h1>\n<p>Golang에서는 언어 차원에서의 스레드와 코루틴을 혼합하여 고루틴을 만들었으며, 고루틴을 이용하여 운영체제가 제공하는 스레드보다 작고 빠른 경량화된 스레드 개념을 제공한다.</p>\n<h1>Kotlin의 코루틴</h1>\n<h2>Generator</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">fun <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 1, 3, 5, 8, 24, 72]</span>\n<span class=\"token punctuation\">}</span>\nval sequence <span class=\"token operator\">=</span> sequence <span class=\"token punctuation\">{</span>\n\tval start <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\">// yielding a single value</span>\n    <span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// yielding an iterable</span>\n    <span class=\"token function\">yieldAll</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.</span><span class=\"token number\">.5</span> step <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// yielding an infinite sequence</span>\n    <span class=\"token function\">yieldAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateSequence</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">8</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코틀린은 Generator는 sequence와 yield 함수를 이용하여 구현 할 수 있다.</p>\n<h2>suspend</h2>\n<p>코틀린에서 <code class=\"language-text\">suspend</code> 가 붙는 함수는 코루틴을 의미 하고, 그 코루틴을 suspend 하는 지점이다. 모든 suspend 함수 호출을 따라가면 맨 아래에는 <code class=\"language-text\">suspendCoroutine</code> 이라는 low-level API 호출이 있으며, 이 함수를 호출하여 현재 코루틴의 실행을 멈춘다. 실행을 재개하는 것은 <code class=\"language-text\">suspendCoroutine</code>함수의 인자로 전달하는 콜백으로 시스템이 던져주는 <code class=\"language-text\">Continuation</code> 객체를 통해 이뤄진다. <code class=\"language-text\">suspendCoroutine</code>과 <code class=\"language-text\">Continuation</code>을 통해 suspend / resume이 가능하다.</p>\n<h1>참고</h1>\n<ul>\n<li><a href=\"https://medium.com/@jooyunghan/%EC%BD%94%EB%A3%A8%ED%8B%B4-%EC%86%8C%EA%B0%9C-504cecc89407\">블로그 : 코루틴 소개</a></li>\n<li><a href=\"https://namu.wiki/w/%EC%BD%94%EB%A3%A8%ED%8B%B4\">나무위키 : 코루틴</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield - JavaScript | MDN</a></li>\n</ul>","frontmatter":{"title":"","date":null,"description":null}}},"pageContext":{"slug":"/coroutine/","previous":{"fields":{"slug":"/async-nonblocking/"},"frontmatter":{"title":"비동기 논블로킹"}},"next":null}},"staticQueryHashes":["2079442891","2841359383"],"slicesMap":{}}